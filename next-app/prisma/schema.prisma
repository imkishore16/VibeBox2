generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  password     String?
  provider     Provider
  tokens       Int      @default(100)
  hostedSpaces Space[]  @relation("hostedBy")
  addedStreams Stream[] @relation("addedBy")
  streams      Stream[] @relation("user")
  upvotes      Upvote[]
  transactions Transaction[]
}

model Stream {
  id            String         @id @default(uuid())
  platform      Platform
  type          StreamType
  url           String
  extractedId   String
  title         String         @default("")
  smallImg      String?
  bigImg        String?
  albumCover    String?
  artist        String?
  active        Boolean        @default(true)
  played        Boolean        @default(false)
  playedTs      DateTime?
  createAt      DateTime       @default(now())
  userId        String
  addedBy       String
  spaceId       String?
  paidAmount    Int           @default(0)
  
  currentStream CurrentStream?
  addedByUser   User           @relation("addedBy", fields: [addedBy], references: [id])
  space         Space?         @relation("spaceStreams", fields: [spaceId], references: [id], onDelete: Cascade)
  user          User           @relation("user", fields: [userId], references: [id])
  upvotes       Upvote[]
}

model CurrentStream {
  id       String  @id @default(uuid())
  userId   String
  streamId String? @unique
  spaceId  String? @unique
  space    Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  stream   Stream? @relation(fields: [streamId], references: [id])
}

model Upvote {
  id       String @id @default(uuid())
  userId   String
  streamId String
  stream   Stream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, streamId])
}

model Space {
  id            String         @id @default(uuid())
  name          String
  hostId        String
  isActive      Boolean        @default(true)
  currentStream CurrentStream?
  host          User           @relation("hostedBy", fields: [hostId], references: [id])
  streams       Stream[]       @relation("spaceStreams")
}

model Transaction {
  id          String    @id @default(uuid())
  userId      String
  amount      Int       // Amount of tokens spent/received
  type        TransactionType
  description String
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

enum StreamType {
  VIDEO
  AUDIO
}

enum Provider {
  Google
  Credentials
  Spotify
}

enum Platform {
  YOUTUBE
  SPOTIFY
}

enum TransactionType {
  PRIORITY_BOOST
  SYSTEM_GRANT
  REWARD
}
